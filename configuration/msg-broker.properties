# Configuration Variables
service.variable.eureka.server.name=enav-eureka.enav-service-architecture.svc.grad-rrnav.k8s
service.variable.eureka.server.port=8761
service.variable.keycloak.server.url=<auth_url>
service.variable.keycloak.server.realm=<auth_realm>
service.variable.keycloak.server.client_id=<auth_client_id>
service.variable.keycloak.server.client_secret={cipher}<auth_client_secret>
service.variable.kafka.server.name=kafka-broker.enav-service-architecture.svc.grad-rrnav.k8s
service.variable.kafka.server.port=9092
service.variable.zookeeper.server.name=zookeeper.enav-service-architecture.svc.grad-rrnav.k8s
service.variable.zookeeper.server.port=2181

# Eureka Client Configuration
eureka.client.service-url.defaultZone=http://${service.variable.eureka.server.name}:${service.variable.eureka.server.port}/eureka/
eureka.client.registryFetchIntervalSeconds=5
eureka.instance.preferIpAddress=true
eureka.instance.leaseRenewalIntervalInSeconds=10
eureka.instance.metadata-map.startup=${random.int}

# Spring-boot Admin Configuration
spring.boot.admin.client.url=http://${service.variable.eureka.server.name}:${service.variable.eureka.server.port}/admin

#TODO: Not sure we need this here
spring.jackson.serialization.write-dates-as-timestamps=false

# Springdoc configuration
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.packagesToScan=org.grad.eNav.msgBroker.controllers

# Keycloak Configuration
spring.security.oauth2.client.registration.keycloak.client-id=${service.variable.keycloak.server.client_id}
spring.security.oauth2.client.registration.keycloak.client-secret=${service.variable.keycloak.server.client_secret}
spring.security.oauth2.client.registration.keycloak.client-name=Keycloak
spring.security.oauth2.client.registration.keycloak.provider=keycloak
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.scope=openid
spring.security.oauth2.client.registration.keycloak.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.provider.keycloak.issuer-uri=${service.variable.keycloak.server.url}/realms/${service.variable.keycloak.server.realm}
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username
spring.security.oauth2.resourceserver.jwt.issuer-uri=${service.variable.keycloak.server.url}/realms/${service.variable.keycloak.server.realm}

# Kafka Configuration
kafka.brokers=${service.variable.kafka.server.name}:${service.variable.kafka.server.port}
kafka.zookeepers=${service.variable.zookeeper.server.name}:${service.variable.zookeeper.server.port}
kafka.consumer.count=1

# Web Socket Configuration
gla.rad.msg-broker.web-socket.name=msg-broker-websocket
gla.rad.msg-broker.web-socket.prefix=topic

# Front-end Information
gla.rad.msgBroker.info.name=Message Broker
gla.rad.msgBroker.info.version=${spring.application.version}
gla.rad.msgBroker.info.operatorName=Research and Development Directorate of GLA of UK and Ireland
gla.rad.msgBroker.info.operatorContact=Nikolaos.Vastardis@gla-rad.org
gla.rad.msgBroker.info.operatorUrl=https://www.gla-rad.org/
gla.rad.msgBroker.info.copyright=\u00A9 2024 GLA Research & Development

