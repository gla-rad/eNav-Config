# Configuration Variables
service.variable.eureka.server.name=enav-eureka.enav-service-architecture.svc.grad-rrnav.k8s
service.variable.eureka.server.port=8761
service.variable.eureka.server.url=<eureka_url>
service.variable.niord.server.url=<niord_url>
service.variable.keycloak.server.url=<auth_url>
service.variable.keycloak.server.realm=<auth_realm>
service.variable.keycloak.server.client_id=<client_id>
service.variable.keycloak.server.client_secret={cipher}<client_secret>
service.variable.ssl.keystore.password={cipher}<keystore_password>
service.variable.ssl.keystore.key-password={cipher}<keystore_key_password>
service.variable.ssl.truststore.password={cipher}<truststore_password>

# Springdoc configuration
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.packagesToScan=org.grad.eNav.apiGateway.controllers

# Eureka Client Configuration
eureka.client.service-url.defaultZone=http://${service.variable.eureka.server.name}:${service.variable.eureka.server.port}/eureka/
eureka.client.registryFetchIntervalSeconds=5
eureka.instance.preferIpAddress=true
eureka.instance.leaseRenewalIntervalInSeconds=10
eureka.instance.metadata-map.startup=${random.int}
eureka.instance.nonSecurePortEnabled=false
eureka.instance.securePortEnabled=true
management.endpoints.web.base-path=/actuator

# Spring-boot Admin Configuration
spring.boot.admin.client.url=http://${service.variable.server.eureka.name}:${service.variable.server.eureka.port}/admin

# Enable route discovery automatically through Eureka
spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

# Increase the web-socket sizes
server.max-http-header-size=1000000
server.max-initial-line-length=1000000
server.h2c-max-content-length=10000000
spring.cloud.gateway.httpclient.websocket.max-frame-payload-length=10000000

# Allow CORS for SECOM requests
spring.cloud.gateway.default-filters[0]=DedupeResponseHeader=Access-Control-Allow-Origin Access-Control-Allow-Credentials, RETAIN_FIRST
spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedOriginPatterns=*
spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedMethods=GET,POST,PUT,DELETE,OPTIONS
spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedHeaders=*
spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowCredentials=false

# Adding Route for the "/enav" path support
spring.cloud.gateway.routes[0].id=service-discovery-route-msg-broker
spring.cloud.gateway.routes[0].uri=lb://msg-broker
spring.cloud.gateway.routes[0].predicates[0]=Path=/enav/msg-broker/**
spring.cloud.gateway.routes[0].filters[0]=StripContextAndPrefix=2
spring.cloud.gateway.routes[1].id=service-discovery-route-vdes-ctrl
spring.cloud.gateway.routes[1].uri=lb://vdes-ctrl
spring.cloud.gateway.routes[1].predicates[0]=Path=/enav/vdes-ctrl/**
spring.cloud.gateway.routes[1].filters[0]=StripContextAndPrefix=2
spring.cloud.gateway.routes[2].id=service-discovery-route-aton-service
spring.cloud.gateway.routes[2].uri=lb://aton-service
spring.cloud.gateway.routes[2].predicates[0]=Path=/enav/aton-service/**
spring.cloud.gateway.routes[2].filters[0]=StripContextAndPrefix=2
spring.cloud.gateway.routes[3].id=service-discovery-route-aton-admin-service
spring.cloud.gateway.routes[3].uri=lb://aton-admin-service
spring.cloud.gateway.routes[3].predicates[0]=Path=/enav/aton-admin-service/**
spring.cloud.gateway.routes[3].filters[0]=StripContextAndPrefix=2
spring.cloud.gateway.routes[4].id=service-discovery-route-ckeeper
spring.cloud.gateway.routes[4].uri=lb://ckeeper
spring.cloud.gateway.routes[4].predicates[0]=Path=/enav/ckeeper/**
spring.cloud.gateway.routes[4].filters[0]=StripContextAndPrefix=2
spring.cloud.gateway.routes[5].id=service-discovery-route-aton-service-client
spring.cloud.gateway.routes[5].uri=lb://aton-service-client
spring.cloud.gateway.routes[5].predicates[0]=Path=/enav/aton-service-client/**
spring.cloud.gateway.routes[5].filters[0]=StripContextAndPrefix=2

# Organisation MRN allowed access via X.509 certificates
gla.rad.api-gateway.x509.organisation.mrn=urn:mrn:mcp:org:mcc

# Keycloak Configuration
spring.security.oauth2.client.registration.keycloak.client-id=${service.variable.keycloak.server.client_id}
spring.security.oauth2.client.registration.keycloak.client-secret=${service.variable.keycloak.server.client_secret}
spring.security.oauth2.client.registration.keycloak.client-name=Keycloak
spring.security.oauth2.client.registration.keycloak.provider=keycloak
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.scope=openid
spring.security.oauth2.client.registration.keycloak.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.provider.keycloak.issuer-uri=${service.variable.keycloak.server.url}/realms/${service.variable.keycloak.server.realm}
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username
spring.security.oauth2.resourceserver.jwt.issuer-uri=${service.variable.keycloak.server.url}/realms/${service.variable.keycloak.server.realm}

# Add web-socket rewriting configuration
server.forward-headers-strategy=framework

# Change the index for PROD and open the appropriate resources
gla.rad.api-gateway.resources.index=index
gla.rad.api-gateway.resources.open=/,/login,/static/**,/niord/**,/niord-quarkus/**

# The Server SSL Configuration
server.ssl.enabled=true
server.ssl.key-store=/ssl/keystore.jks
server.ssl.key-store-password=${service.variable.ssl.keystore.password}
server.ssl.key-alias=api-gateway
server.ssl.key-password=${service.variable.ssl.keystore.key-password}
server.ssl.trust-store=/ssl/truststore.jks
server.ssl.trust-store-password=${service.variable.ssl.truststore.password}
server.ssl.client-auth=want

# Front-end Information
gla.rad.api-gateway.eureka.url=${service.variable.eureka.server.url}
gla.rad.api-gateway.niord.url=${service.variable.niord.server.url}
