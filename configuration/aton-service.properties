# Configuration Variables
service.variable.eureka.server.name=enav-eureka.enav-service-architecture.svc.grad-rrnav.k8s
service.variable.eureka.server.port=8761
service.variable.keycloak.server.url=<auth_url>
service.variable.keycloak.server.realm=<auth_realm>
service.variable.keycloak.server.client_id=<auth_client_id>
service.variable.keycloak.server.client_secret={cipher}<auth_client_secret>
service.variable.kafka.server.name=kafka-broker.enav-service-architecture.svc.grad-rrnav.k8s
service.variable.kafka.server.port=9092
service.variable.zookeeper.server.name=zookeeper.enav-service-architecture.svc.grad-rrnav.k8s
service.variable.zookeeper.server.port=2181
service.variable.database.server.name=<database_server_hostname>
service.variable.database.server.port=5432
service.variable.database.name=<database_name>
service.variable.database.username={cipher}<database_username>
service.variable.database.password={cipher}<database_password>
service.variable.secom.ssl.keystore.password={cipher}<keystore_password>
service.variable.secom.ssl.truststore.password={cipher}<truststore_password>
service.variable.mcp.service-registry.endpoint=<service_registry_endpoint>

# Eureka Client Configuration
eureka.client.service-url.defaultZone=http://${service.variable.eureka.server.name}:${service.variable.eureka.server.port}/eureka/
eureka.client.registryFetchIntervalSeconds=5
eureka.instance.preferIpAddress=true
eureka.instance.leaseRenewalIntervalInSeconds=10
eureka.instance.metadata-map.startup=${random.int}

# Spring-boot Admin Configuration
spring.boot.admin.client.url=http://${service.variable.server.eureka.name}:${service.variable.server.eureka.port}/admin

# Logging Configuration
# If we don't load the configuration for logback manually here, this is not
# picked up at the correct time by spring-cloud and the service asks to write
# to the /tmp/spring.log file. Another way of dealing with this is to add this
# information in the bootstrap.properties file.
logging.config=classpath:logback-secom.xml

# SECOM Logging Configuration
logging.secom.requests.file.name=/var/log/${spring.application.name}-secom-requests.log
logging.secom.requests.rollingpolicy.file-name=/var/log/${spring.application.name}-secom-requests.%d{yyyy-MM-dd}.%i.log
logging.secom.requests.rollingpolicy.max-file-size=10MB
logging.secom.requests.rollingpolicy.max-history=10
logging.secom.requests.rollingpolicy.total-size-cap=100MB

# Springdoc configuration
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.display-query-params=true
springdoc.swagger-ui.url=/api/secom/openapi.json
springdoc.packagesToScan=org.grad.eNav.atonService.controllers

# Spring JPA Configuration - PostgreSQL
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.hibernate.show-sql=true
spring.jpa.properties.hibernate.search.backend.lucene_version=LATEST
spring.jpa.properties.hibernate.search.backend.directory.root=./lucene/
spring.jpa.properties.hibernate.search.schema_management.strategy=create-or-update
spring.jpa.properties.hibernate.search.backend.analysis.configurer=class:org.grad.eNav.atonService.config.CustomLuceneAnalysisConfigurer

# Datasource Configuration
spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migrations,filesystem:/opt/migrations
spring.datasource.url=jdbc:postgresql://${service.variable.database.server.name}:${service.variable.database.server.port}/${service.variable.database.name}
spring.datasource.username=${service.variable.database.username}
spring.datasource.password=${service.variable.database.password}

# Fix the broken connection issue
# See: https://stackoverflow.com/questions/60925289/hikaripool-1-connection-marked-as-broken-because-of-sqlstate08006-errorcode
spring.datasource.test-while-idle=true
spring.datasource.validation-query=SELECT 1;
spring.datasource.time-between-eviction-runs-millis=60000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.validationTimeout=300000
spring.datasource.hikari.connectionTimeout=30000
spring.datasource.hikari.idleTimeout=600000
spring.datasource.hikari.maxLifetime=1800000
spring.datasource.remove-abandoned=true
spring.datasource.remove-abandoned-timeout=60

# Flyway configuration
spring.datasource.flyway.enabled=false
spring.datasource.flyway.url=jdbc:postgresql://${service.variable.database.server.name}:${service.variable.database.server.port}/${service.variable.database.name}
spring.datasource.flyway.schemas=${service.variable.database.name}
spring.datasource.flyway.user=${service.variable.database.username}
spring.datasource.flyway.password=${service.variable.database.password}

# Keycloak Configuration
spring.security.oauth2.client.registration.keycloak.client-id=${service.variable.keycloak.server.client_id}
spring.security.oauth2.client.registration.keycloak.client-secret=${service.variable.keycloak.server.client_secret}
spring.security.oauth2.client.registration.keycloak.client-name=Keycloak
spring.security.oauth2.client.registration.keycloak.provider=keycloak
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.scope=openid
spring.security.oauth2.client.registration.keycloak.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.provider.keycloak.issuer-uri=${service.variable.keycloak.server.url}/realms/${service.variable.keycloak.server.realm}
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username
spring.security.oauth2.resourceserver.jwt.issuer-uri=${service.variable.keycloak.server.url}/realms/${service.variable.keycloak.server.realm}

# Feign
feign.client.config.default.connectTimeout=60000
feign.client.config.default.readTimeout=20000

# Feign Security
spring.security.oauth2.client.registration.feign.client-id=${service.variable.keycloak.server.client_id}
spring.security.oauth2.client.registration.feign.client-secret=${service.variable.keycloak.server.client_secret}
spring.security.oauth2.client.registration.feign.authorization-grant-type=client_credentials
spring.security.oauth2.client.registration.feign.scope=web-origins,openid
spring.security.oauth2.client.provider.feign.token-uri=${service.variable.keycloak.server.url}/realms/niord/protocol/openid-connect/token

# Kafka Configuration
kafka.brokers=${service.variable.kafka.server.name}:${service.variable.kafka.server.port}
kafka.zookeepers=${service.variable.zookeeper.server.name}:${service.variable.zookeeper.server.port}
kafka.consumer.count=1

# Web Socket Configuration
gla.rad.atonService.web-socket.name=aton-service-websocket
gla.rad.atonService.web-socket.prefix=topic

# Listening geometry definition
gla.rad.aton-service.geometry=POLYGON ((-180 -90, -180 90, 180 90, 180 -90, -180 -90))

# Front-end Information
gla.rad.service.info.name=AtoN Service
gla.rad.service.info.version=${spring.application.version}
gla.rad.service.info.organization=Research and Development Directorate of GLA of UK and Ireland
gla.rad.service.info.electronicMailAddresses[0]=Nikolaos.Vastardis@gla-rad.org
gla.rad.service.info.electronicMailAddresses[1]=enquiries@gla-rad.org
gla.rad.service.info.url=https://www.gla-rad.org/
gla.rad.service.info.phone=+44 01255 245000
gla.rad.service.info.fax=+44 01255 245000
gla.rad.service.info.city=Harwich
gla.rad.service.info.postalCode=CO12 3JW
gla.rad.service.info.country=United Kingdom
gla.rad.service.info.locales=en_GB,cy_GB,gd_GB,ga_IE
gla.rad.service.info.administrativeArea=England, Wales, Scotland & the whole of Ireland
gla.rad.service.info.ihoProducerCode=GB01

# Service S-100 configuration
gla.rad.service.info.copyright=\u00A9 2024 GLA Research & Development
gla.rad.service.s100.exchangeSet.dir=/var/s-100
gla.rad.service.s100.exchangeSet.prefix=atonServiceExchangeSet
gla.rad.service.s100.dataProduct.location=/xsd/S125.xsd

# Service SECOM configuration
gla.rad.service.secom.rootCertificateAlias=mcp-root
gla.rad.service.secom.subscriptions.restrictDuplicates=true

# SECOM Configuration Properties
secom.service-registry.url=${service.variable.mcp.service-registry.endpoint}
secom.security.ssl.keystore=/ssl/keystore.jks
secom.security.ssl.keystore-type=jks
secom.security.ssl.keystore-password=${service.variable.secom.ssl.keystore.password}
secom.security.ssl.truststore=/ssl/truststore.jks
secom.security.ssl.truststore-type=jks
secom.security.ssl.truststore-password=${service.variable.secom.ssl.truststore.password}
secom.security.ssl.insecureSslPolicy=true